# Guia de Uso do Prisma com Node.js e Express

## 📌 Introdução
Este guia mostra como configurar e usar o **Prisma** em um projeto **Node.js + Express** seguindo a **arquitetura MVC**.

---

## 🚀 1. Instalação do Prisma
No terminal, execute:
```bash
npm install prisma @prisma/client
```

Inicialize o Prisma:
```bash
npx prisma init
```
Isso criará a pasta `prisma/` e o arquivo `.env`.

<<<<<<< HEAD
  
=======
---

## 🛠 2. Configuração do Banco de Dados
No arquivo `.env`, defina a variável `DATABASE_URL` com sua conexão (exemplo com PostgreSQL):
```env
DATABASE_URL="postgresql://user:password@localhost:5432/seubanco"
```

No arquivo `prisma/schema.prisma`, defina o modelo do banco:
```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique
}
```

---

## 📦 3. Criando o Banco de Dados e as Tabelas
Execute os comandos abaixo para criar as tabelas no banco:
```bash
npm run migrate:new nome-da-migration
```

Para gerar o **Prisma Client** (necessário para consultas):
```bash
npx prisma generate
```

---

## 📌 4. Criando um Repositório para Usuários
Crie o arquivo `src/repositories/UserRepository.ts`:
```typescript
import { PrismaClient, User } from '@prisma/client';

const prisma = new PrismaClient();

class UserRepository {
  static async getAllUsers(): Promise<User[]> {
    return prisma.user.findMany();
  }

  static async createUser(userData: User): Promise<User> {
    return prisma.user.create({ data: userData });
  }
}

export default UserRepository;
```

---

## 🔥 5. Criando o Serviço de Usuários
Crie `src/services/UserService.ts`:
```typescript
import UserRepository from '../repositories/UserRepository';
import { User } from '@prisma/client';

class UserService {
  static async getAllUsers(): Promise<User[]> {
    return UserRepository.getAllUsers();
  }

  static async createUser(userData: User): Promise<User> {
    return UserRepository.createUser(userData);
  }
}

export default UserService;
```

---

## 🏗 6. Criando o Controller de Usuários
Crie `src/controllers/UserController.ts`:
```typescript
import { Request, Response } from 'express';
import UserService from '../services/UserService';

class UserController {
  static async getAllUsers(req: Request, res: Response): Promise<void> {
    try {
      const users = await UserService.getAllUsers();
      res.json(users);
    } catch (error) {
      res.status(500).json({ error: (error as Error).message });
    }
  }

  static async createUser(req: Request, res: Response): Promise<void> {
    try {
      const user = await UserService.createUser(req.body);
      res.status(201).json(user);
    } catch (error) {
      res.status(500).json({ error: (error as Error).message });
    }
  }
}

export default UserController;
```

---

## 🛤 7. Criando as Rotas de Usuários
Crie `src/routes/userRoutes.ts`:
```typescript
import express from 'express';
import UserController from '../controllers/UserController';

const router = express.Router();
router.get('/', UserController.getAllUsers);
router.post('/', UserController.createUser);

export default router;
```

Em `src/routes/index.ts`:
```typescript
import express from 'express';
import userRoutes from './userRoutes';

const router = express.Router();
router.use('/users', userRoutes);

export default router;
```

---

## 🌎 8. Configurando o Servidor Express
No `server.ts`:
```typescript
import express, { Application } from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import routes from './src/routes';

dotenv.config();

const app: Application = express();

app.use(express.json());
app.use(cors());
app.use('/api', routes);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

---

## 🚀 9. Executando o Projeto
Para rodar a API:
```bash
npm run dev
```

Para rodar o Prisma Studio e visualizar os dados:
```bash
npx prisma studio
```

Agora você tem um **CRUD básico com Prisma e Express**! 🚀🔥

>>>>>>> 50b9e447d6016967024ab7f62b4bfa2ed2ed3ace
